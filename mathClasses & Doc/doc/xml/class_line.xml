<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_line" kind="class" language="C++" prot="public">
    <compoundname>Line</compoundname>
    <includes refid="_line_8hpp" local="no">Line.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_line_1a03e62995fcb8f2cdd535b19f38dc7beb" prot="public" static="no" mutable="no">
        <type>DirectionCosine</type>
        <definition>DirectionCosine Line::l</definition>
        <argsstring></argsstring>
        <name>l</name>
        <briefdescription>
<para>the direction cosines of the line </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="16" column="1" bodyfile="Line.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_line_1ade526d53a83ae2cfad4472affeb9ce8d" prot="public" static="no" mutable="no">
        <type><ref refid="class_point" kindref="compound">Point</ref></type>
        <definition>Point Line::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
<para>a point that lies on theline to fix it to a location in the space </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="18" column="1" bodyfile="Line.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_line_1ae24f583f6e61000f88a20205e9b7cf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Line::Line</definition>
        <argsstring>(DirectionCosines dc, Point p)</argsstring>
        <name>Line</name>
        <param>
          <type><ref refid="class_direction_cosines" kindref="compound">DirectionCosines</ref></type>
          <declname>dc</declname>
        </param>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Constructor for line of the form of direction cosines and a point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="21" column="1" bodyfile="Line.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1afeaa676c7d249d582c5766dc732a78e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Line::Line</definition>
        <argsstring>(Point p1, Point p2)</argsstring>
        <name>Line</name>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="class_point" kindref="compound">Point</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Constructor for line of the form of two points p1, p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="24" column="1" bodyfile="Line.cpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1aabe85f48d22d92b62257091f48174fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Line::~Line</definition>
        <argsstring>()</argsstring>
        <name>~Line</name>
        <briefdescription>
<para>Destructor for line object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="27" column="1" bodyfile="Line.cpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1a8059ce73fc21fafe0ea87939d7d20895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Line::isParallel</definition>
        <argsstring>(Line L)</argsstring>
        <name>isParallel</name>
        <param>
          <type><ref refid="class_line" kindref="compound">Line</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Returns True when line is parallel to given line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="30" column="1" bodyfile="Line.cpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1adf08ea54b857c27d783321a3e6858222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Line::isPerpendicular</definition>
        <argsstring>(Line L)</argsstring>
        <name>isPerpendicular</name>
        <param>
          <type><ref refid="class_line" kindref="compound">Line</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Returns True when line is perpendicular to given line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="33" column="1" bodyfile="Line.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1aefe5ec3e42ab38c1f60e65ca09f0fd29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Line::angleWithLine</definition>
        <argsstring>(Line L)</argsstring>
        <name>angleWithLine</name>
        <param>
          <type><ref refid="class_line" kindref="compound">Line</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Returns angle made with given <ref refid="class_line" kindref="compound">Line</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="36" column="1" bodyfile="Line.cpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1abd11dc16386ee1d5424deac55dea0d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Line::angleWithPlane</definition>
        <argsstring>(Plane P)</argsstring>
        <name>angleWithPlane</name>
        <param>
          <type><ref refid="class_plane" kindref="compound">Plane</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Returns angle made with given <ref refid="class_plane" kindref="compound">Plane</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="39" column="1" bodyfile="Line.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1af20457df1ce948794350fab12c16ee14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_line" kindref="compound">Line</ref></type>
        <definition>Line Line::projectionOnPlane</definition>
        <argsstring>(Plane P)</argsstring>
        <name>projectionOnPlane</name>
        <param>
          <type><ref refid="class_plane" kindref="compound">Plane</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Returns projection of line on the given <ref refid="class_plane" kindref="compound">Plane</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="42" column="1" bodyfile="Line.cpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1a12787f5d97b7764c5b1836fb9007fb86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_line" kindref="compound">Line</ref></type>
        <definition>Line Line::imageInPlane</definition>
        <argsstring>(Plane P)</argsstring>
        <name>imageInPlane</name>
        <param>
          <type><ref refid="class_plane" kindref="compound">Plane</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Returns image of line in the given <ref refid="class_plane" kindref="compound">Plane</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="45" column="1" bodyfile="Line.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1aad7d2a0b6ac395a1bd81d55dd2b7a81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Line::liesInPlane</definition>
        <argsstring>(Plane P)</argsstring>
        <name>liesInPlane</name>
        <param>
          <type><ref refid="class_plane" kindref="compound">Plane</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Returns True if line lies in the given <ref refid="class_plane" kindref="compound">Plane</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="48" column="1" bodyfile="Line.cpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1a01b3547f05e338ab7d7a4989d379c432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Line::intersects</definition>
        <argsstring>(Line L)</argsstring>
        <name>intersects</name>
        <param>
          <type><ref refid="class_line" kindref="compound">Line</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Returns True if line intersect with the given <ref refid="class_line" kindref="compound">Line</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="51" column="1" bodyfile="Line.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1a3abb028a100196d85dd2674c3ef86421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_point" kindref="compound">Point</ref></type>
        <definition>Point Line::pointOfIntersection</definition>
        <argsstring>(Line L)</argsstring>
        <name>pointOfIntersection</name>
        <param>
          <type><ref refid="class_line" kindref="compound">Line</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="class_point" kindref="compound">Point</ref> of intersection of the two lines, null if they don&apos;t intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="54" column="1" bodyfile="Line.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1af5a77b743d209b9aad7b92d1fe2b786a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_point" kindref="compound">Point</ref></type>
        <definition>Point Line::pointOfIntersection</definition>
        <argsstring>(Plane P)</argsstring>
        <name>pointOfIntersection</name>
        <param>
          <type><ref refid="class_plane" kindref="compound">Plane</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="class_point" kindref="compound">Point</ref> of intersection of line and the given <ref refid="class_plane" kindref="compound">Plane</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="57" column="1" bodyfile="Line.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_line_1a959d5169229a29c786deb42848ac8a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_line" kindref="compound">Line</ref></type>
        <definition>Line Line::lineOfShortestDistance</definition>
        <argsstring>(Line L)</argsstring>
        <name>lineOfShortestDistance</name>
        <param>
          <type><ref refid="class_line" kindref="compound">Line</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Returns the line of shortest distance of two skew lines, null if they intersect. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Line.hpp" line="60" column="1" bodyfile="Line.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Class to define a line in the space 2D/3D. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>Line</label>
        <link refid="class_line"/>
        <childnode refid="6" relation="usage">
          <edgelabel>p</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Point</label>
        <link refid="class_point"/>
      </node>
    </collaborationgraph>
    <location file="Line.hpp" line="11" column="1" bodyfile="Line.hpp" bodystart="10" bodyend="61"/>
    <listofallmembers>
      <member refid="class_line_1aefe5ec3e42ab38c1f60e65ca09f0fd29" prot="public" virt="non-virtual"><scope>Line</scope><name>angleWithLine</name></member>
      <member refid="class_line_1abd11dc16386ee1d5424deac55dea0d1b" prot="public" virt="non-virtual"><scope>Line</scope><name>angleWithPlane</name></member>
      <member refid="class_line_1a12787f5d97b7764c5b1836fb9007fb86" prot="public" virt="non-virtual"><scope>Line</scope><name>imageInPlane</name></member>
      <member refid="class_line_1a01b3547f05e338ab7d7a4989d379c432" prot="public" virt="non-virtual"><scope>Line</scope><name>intersects</name></member>
      <member refid="class_line_1a8059ce73fc21fafe0ea87939d7d20895" prot="public" virt="non-virtual"><scope>Line</scope><name>isParallel</name></member>
      <member refid="class_line_1adf08ea54b857c27d783321a3e6858222" prot="public" virt="non-virtual"><scope>Line</scope><name>isPerpendicular</name></member>
      <member refid="class_line_1a03e62995fcb8f2cdd535b19f38dc7beb" prot="public" virt="non-virtual"><scope>Line</scope><name>l</name></member>
      <member refid="class_line_1aad7d2a0b6ac395a1bd81d55dd2b7a81d" prot="public" virt="non-virtual"><scope>Line</scope><name>liesInPlane</name></member>
      <member refid="class_line_1ae24f583f6e61000f88a20205e9b7cf1c" prot="public" virt="non-virtual"><scope>Line</scope><name>Line</name></member>
      <member refid="class_line_1afeaa676c7d249d582c5766dc732a78e2" prot="public" virt="non-virtual"><scope>Line</scope><name>Line</name></member>
      <member refid="class_line_1a959d5169229a29c786deb42848ac8a1f" prot="public" virt="non-virtual"><scope>Line</scope><name>lineOfShortestDistance</name></member>
      <member refid="class_line_1ade526d53a83ae2cfad4472affeb9ce8d" prot="public" virt="non-virtual"><scope>Line</scope><name>p</name></member>
      <member refid="class_line_1a3abb028a100196d85dd2674c3ef86421" prot="public" virt="non-virtual"><scope>Line</scope><name>pointOfIntersection</name></member>
      <member refid="class_line_1af5a77b743d209b9aad7b92d1fe2b786a" prot="public" virt="non-virtual"><scope>Line</scope><name>pointOfIntersection</name></member>
      <member refid="class_line_1af20457df1ce948794350fab12c16ee14" prot="public" virt="non-virtual"><scope>Line</scope><name>projectionOnPlane</name></member>
      <member refid="class_line_1aabe85f48d22d92b62257091f48174fac" prot="public" virt="non-virtual"><scope>Line</scope><name>~Line</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
